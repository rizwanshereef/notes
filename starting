Before creating any containers we have to initialize LXD.
```
$ sudo lxd init 

Would you like to use LXD clustering? (yes/no) [default=no]: 
Do you want to configure a new storage pool? (yes/no) [default=yes]: no
Would you like to connect to a MAAS server? (yes/no) [default=no]: no
Would you like to create a new local network bridge? (yes/no) [default=yes]: 
What should the new bridge be called? [default=lxdbr0]: 
What IPv4 address should be used? (CIDR subnet notation, “auto” or “none”) [default=auto]: 
What IPv6 address should be used? (CIDR subnet notation, “auto” or “none”) [default=auto]: 
Would you like LXD to be available over the network? (yes/no) [default=no]: n
Would you like stale cached images to be updated automatically? (yes/no) [default=yes] n
Would you like a YAML "lxd init" preseed to be printed? (yes/no) [default=no]: y
config:
  images.auto_update_interval: "0"
networks:
- config:
    ipv4.address: auto
    ipv6.address: auto
  description: ""
  name: lxdbr0
  type: ""
storage_pools: []
profiles:
- config: {}
  description: ""
  devices:
    eth0:
      name: eth0
      network: lxdbr0
      type: nic
  name: default
cluster: null
```

Now list all containers

```
$ sudo lxc list

If this is your first time running LXD on this machine, you should also run: lxd init
To start your first instance, try: lxc launch ubuntu:18.04

+------+-------+------+------+------+-----------+
| NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS |
+------+-------+------+------+------+-----------+
```

Create and lunch a container
```
$ sudo lxc launch images:alpine/3.10 a1
Creating a1
Starting a1
```

The images directive needs to be used only if the image is note yet pulled from the images mirror. If we have a cached version already on the server then the images: part can be omitted.
The images are pulled from : https://us.images.linuxcontainers.org/
LXD will cache and reuse the images once launched.

```
$ sudo lxc list
+------+---------+-----------------------+-----------------------------------------------+-----------+-----------+----------+
| NAME |  STATE  |         IPV4          |                     IPV6                      |   TYPE    | SNAPSHOTS | LOCATION |
+------+---------+-----------------------+-----------------------------------------------+-----------+-----------+----------+
| a1   | RUNNING | 10.156.178.188 (eth0) | fd42:93f2:521c:69a4:216:3eff:fe2a:bb52 (eth0) | CONTAINER | 0         | cicada   |
+------+---------+-----------------------+-----------------------------------------------+-----------+-----------+----------+
```
To delete images, just run the lxc delete command followed by the name of the container.

```
sudo lxc delete a1
```

Getting a shell in the container is straight up simple.
```
$ sudo lxc exec a1 -- /bin/ash ~ #  
```

Here a1 is the container name. We can run any command using the exec parameter followed by the container name and then followed by two hyphen and then the command we would like to run. As you could see here we are directly accessing the root shell.As per the docs the shell was /bin/bash, but it will not return anything is the root use is having a totally different shell. In my case the root user as using the ash shell.
```
$ sudo lxc exec a1 -- cat /etc/passwd root:x:0:0:root:/root:/bin/ash 
```

To stop a container
```
$ sudo lxc stop a1 
```

To start a container
```
$ sudo lxc start a1 
```

Note : I noticed that the container after being stopped and then restarted does not have an IPv6 address assigned to it.
